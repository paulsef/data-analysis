#library(ipred)
#bagTree <- bagging(activity ~., data = samsung_training, coob = TRUE)
#random forests TRY EXCLUDING SUBJECT THAT MIGHT BE TOTALLY NECCESSARY
library(randomForest)
samsung_forest <- randomForest(activity ~ ., data = samsung_training, prox = TRUE)
#validation set has an 85 % success rate
predictions <- predict(samsung_forest, samsung_validation)
1 - sum(predictions != samsung_validation$activity)/(length(predictions))
important <- samsung_forest$importance
important <- important[order(important[,1], decreasing = TRUE),]
important <- as.matrix(important)
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[4]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[5]],
col = samsung_training$activity)
samsung_training[,rownames(important)[6]],
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[6]],
col = samsung_training$activity)
?myplclust
source("http://dl.dropbox.com/u/7710864/courseraPublic/myplclust.R")
?distanceMatric
?distanceMatrix
?dist
dist(samsung_training[,names(important)[1]])
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[2]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[2]],
samsung_training[,rownames(important)[1]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[2]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[3]],
samsung_training[,rownames(important)[2]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[2]],
samsung_training[,rownames(important)[4]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[2]],
samsung_training[,rownames(important)[5]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[5]],
samsung_training[,rownames(important)[2]],
col = samsung_training$activity)
head(important)
sessionInfo()
samsung_forest
predictions <- predict(samsung_forest, samsung_test)
1 - sum(predictions != samsung_test$activity)/(length(predictions))
samsung_test <- subset(samsungData, subject == 27 |
subject == 28 |
subject == 29 |
subject == 30)
str(samsung_test)
predictions <- predict(samsung_forest, samsung_test)
1 - sum(predictions != samsung_test$activity)/(length(predictions))
sum(predictions != samsung_test$activity)/(length(predictions))
(sum(predictions != samsung_test$activity)/(length(predictions)))*100
plot(randomForest)
plot(sumsung_forest)
plot(samsung_forest)
?plot.randomForest
plot.randomForest (samsung_forest)
plot.randomForest(samsung_forest)
?plot.randomForest
plot.randomForest(samsung_forest)
?plot.randomForest
plot(predictions, samsung_test$activity)
head(predictions)
head(samsung_test$activity)
plot.factor(predictions, samsung_test$activity)
library(graphics)
plot.factor(predictions, samsung_test$activity)
dev.off()
plot.factor(predictions, samsung_test$activity)
plot.factor((predictions - samsung_test$activity))
plot((predictions - samsung_test$activity))
plot((predictions))
plot((samsung$activity))
plot((samsung_test$activity))
plot(predictions, samsung_test$activity)
table(samsung_test$activir)
table(samsung_test$activity)
table(predictions)
(264-250)/264
plot(samsung_test$activity != predictions)
plot(samsung_test$activity != predictions, col = samsung_test$activity)
plot((samsung_test$activity != predictions)/(samsung_test$activty), col = samsung_test$activity)
prediction_matrix <- as.matrix(table(predictions))
prediction_matrix
prediction_matrix <- as.matrix(predictions)
prediction_matrix
actual_matrix <- as.matrix(samsung_test$activity)
merger(prediction_matrix, actual_matrix)
merge(prediction_matrix, actual_matrix)
?merge
both <- merge(as.data.frame(prediction_matrix),as.data.frame(actualy_matrix)
)
both <- merge(as.data.frame(prediction_matrix),as.data.frame(actual_matrix))
both
samsung_forest
rm(samsung_subjectless)
plot(important_ordered)
important_ordered
important <- samsung_forest$importance
important <- important[order(important[,1], decreasing = TRUE),]
important <- as.matrix(important)
plot(samsung_training[,rownames(important)[2]],
samsung_training[,rownames(important)[1]],
col = samsung_training$activity)
important <- samsung_forest$importance
important <- important[order(important[,1], decreasing = TRUE),]
important
important <- as.matrix(important)
head(important)
imortant
important
prediction_matrix
prediction_frame <- data.frame("actual" = samsung_test$activity,
"prediction" = prediction)
prediction_frame <- data.frame("actual" = samsung_test$activity,
"prediction" = predictions)
prediction_frame
rm(prediction_matrix)
rm(both)
rm(actual_matrix)
prediction_frame <- data.frame("actual" = samsung_test$activity,
"prediction" = predictions)
prediction_wrong <- subset(prediction_frame, prediction_frame$)
prediction_wrong <- subset(prediction_frame,
prediction_frame$actual != prediction_frame$prediction)
prediction_wrong
dim(prediction_wrong)
boxplot(prediction_wrong)
boxplot(prediction_wrong$actual, prediction_wrong$prediction)
library(ggplot2)
install.packaged("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(reshape2)
?melt
melted <- melt(prediction_wrong)
melted
ggplot(melt + geom_bar(stat = "identity") + facet_grid(~Sample))
ggplot(melt, geom_bar(stat = "identity") + facet_grid(~Sample))
ggplot(melt) + geom_bar(stat = "identity") + facet_grid(~Sample)
?rbind
?barplot
barplot(as.matrix(prediction_wrong), beside = FALSE)
names(prediction_frame)
str(prediction_frame)
samsung_forest
table(samsung_trainging$activity)
table(samsung_training$activity)
11/280
11/292
+(280/290)
11/292
+(280/292)
12/292
(11/292) + (280/292)
(12/334) + (323/334)
?barplot
hist(prediction_wrong$actual)
hist(as.numeric(prediction_wrong$actual))
as.numeric(prediction_wrong$actual
)
prediction_wrong$actual
barplot(prediction_wrong$actual)
barplot(prediction_wrong$actual)
barplot(as.table(prediction_wrong$actual))
barplot(table(prediction_wrong$actual))
barplot(table(prediction_wrong$actual),table(prediction_wrong$prediction))
barplot(as.matrix(table(prediction_wrong$actual),table(prediction_wrong$prediction)))
barplot(table(prediction_wrong$prediction))
v <- c(table(prediction_wrong$actual), table(prediction_wrong$prediction))
v
v[1]
v$1
install.package("caret")
install.packages("caret")
library(caret)
confusionMatrix(prediction_frame$prediction,prediction_frame$actual)
cunfusion_matrix <- confusionMatrix(prediction_frame$prediction,prediction_frame$actual)
confusion_matrix$table
confusion_matrix
cunfusion_matrix <- confusionMatrix(prediction_frame$prediction,prediction_frame$actual)
confusion_matrix
cunfusion_matrix
cunfusion_matrix
confusion_matrix
cunfusion_matrix
cunfusion_matrix$table
confusion_matrix <- confusionMatrix(prediction_frame$prediction,prediction_frame$actual)
rm(cunfusion_matrix)
confusion_matrix$table
4/13
9/13
2/12
10/12
3/14
11/14
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying mistakes" = c(0,0,0,0,0,0),
"sitting mistakes" = c(0,0,1,0,0,0),
"standing mistakes" = c(0,1,0,0,0,0)
"walking mistakes" = c(0,0,0,0,.306,.672)
"walkdown mistakes" = c(0,0,0,.166,0,.8333)
"walkup misktakes" = c(0,0,.214,0,.786,0))
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying mistakes" = c(0,0,0,0,0,0),
"sitting mistakes" = c(0,0,1,0,0,0),
"standing mistakes" = c(0,1,0,0,0,0),
"walking mistakes" = c(0,0,0,0,.306,.672),
"walkdown mistakes" = c(0,0,0,.166,0,.8333),
"walkup misktakes" = c(0,0,.214,0,.786,0))
percents
boxpllot(percents)
boxplot(percents)
barplot(percents)
?barplots
?barplot
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying mistakes" = c(0,0,0,0,0,0),
"sitting mistakes" = c(0,0,48,0,0,0),
"standing mistakes" = c(0,34,0,0,0,0),
"walking mistakes" = c(0,0,0,0,4,9),
"walkdown mistakes" = c(0,0,0,2,0,11),
"walkup misktakes" = c(0,0,3,0,11,0))
percents
barplot(percents)
barplot(as.matrix(percents))
barplot(as.matrix(percents), col = percents$actual)
barplot(as.matrix(percents), col = percents$actual, legend = percent$actual)
barplot(as.matrix(percents), col = percents$actual, legend = percents$actual)
percents[,2:7]
barplot(as.matrix(percents[,3:7]), col = percents$actual, legend = percents$actual)
xlab = "Actual Activity", ylab = "Number of Errors")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"walkdown" = c(0,0,0,2,0,11),
"walkup" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]), col = percents$actual, legend = percents$actual,
xlab = "Actual Activity", ylab = "Number of Errors")
col
?col
colors
?colors
colors()
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Confusion Matrix Visualization")
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
plot(samsung_forest)
plot(samsung_forest, legend = samsung_forest)
important[1]
plot(samsung_data[,important[1]],samsung_data[,important[2]])
plot(samsungData[,important[1]],samsungData[,important[2]])
plot(samsungData[,important[1]],samsungData[,important[2]], col = levels(samsungData$activity))
plot(samsungData[,important[1]],samsungData[,important[2]], col = as.numeric(levels(samsungData$activity)))
barplot(important[1:20])
plot(summary(samsungData))
summary(samsungData)
plot(samsung_training[,rownames(important)[2]],
samsung_training[,rownames(important)[1]],
col = samsung_training$activity)
rownames(important)
important
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[2]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity)
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1])
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3])
library("tree", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
?tree
tree(activiy ~., data = samsung_training)
tree(activity ~., data = samsung_training)
lala_tree(activity ~., data = samsung_training)
lala_tree <- tree(activity ~., data = samsung_training)
plot(lala_tree)
text(lala_tree)
important[1:10]
rownames(important)[1:10]
partition.tree?
?partition.tree
?tree
lala_tree <- tree(activity ~., data = samsung_training, subset = rownames(important)[1:10])
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
(48+34)/(48+34+13+12+14)
(48+34)/sum(percents$total.mistakes)
pdf(file="./finalfigures.pdf", height=4, width=3*4)
mypar(mfrows = c(1,2))
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
dev.off()
?mypar
??mypar
dev.off()
?mypar
hist(1,1,1,1)
mypar(mfrows = c(1,3))
pdf(file="./finalfigures.pdf", height=4, width=3*4)
mypar(mfrows = c(1,3))
def.off()
dev.off()
?par
dev.off()
par(mfrow = c(1,2))
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3],
main = "First and Second Most Important Variables")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
dev.off()
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3],
main = "First and Second Most Important Variables")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
mypar <- function(a=1,b=1,brewer.n=8,brewer.name="Dark2",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar(mfrow = c(1,3))
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3],
main = "First and Second Most Important Variables")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
mypar <- function(a=1,b=1,brewer.n=8,brewer.name="Dark2",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar(mfrow = c(1,2))
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3],
main = "First and Second Most Important Variables")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
?par
mypar(mfrow = c(2,1))
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3],
main = "First and Second Most Important Variables")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
pdf(file="./finalfigures.pdf", height=4, width=3*4)
mypar <- function(a=1,b=1,brewer.n=8,brewer.name="Dark2",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar(mfrow = c(1,2))
plot(samsung_training[,rownames(important)[1]],
samsung_training[,rownames(important)[3]],
col = samsung_training$activity,
xlab = rownames(important)[1],
ylab = rownames(important)[3],
main = "First and Second Most Important Variables")
percents <- data.frame("actual" = c("laying", "sitting","standing","walk","waldown","walkup"),
"total mistakes" = c(0,48,34,13,12,14),
"laying" = c(0,0,0,0,0,0),
"sitting" = c(0,0,48,0,0,0),
"standing" = c(0,34,0,0,0,0),
"walking" = c(0,0,0,0,4,9),
"downstairs" = c(0,0,0,2,0,11),
"upstairs" = c(0,0,3,0,11,0))
barplot(as.matrix(percents[,3:7]),
col = percents$actual,
legend = percents$actual,
xlab = "Actual Activity",
ylab = "Number of Errors",
main = "Error Identification")
dev.off()
dev.off()
